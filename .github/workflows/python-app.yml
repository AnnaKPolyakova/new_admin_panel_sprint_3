name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  checks:
    strategy:
      matrix:
        python-version: ['3.9']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      id: python-version
      uses: actions/setup-python@v2
      with:
        python-version:  ${{ matrix.python-version }}
    - name: Install dependencies
      id: dependencies
      if: always()
      run: |
        python -m pip install --upgrade pip
        pip install wemake-python-styleguide flake8-html lxml mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: send error message
      uses: appleboy/telegram-action@master
      if: failure()
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "
          _____________________________________________________________

          Project: ${{ github.repository }}

          Author: ${{ github.actor }}

          Commit: ${{ github.sha }}

          Python ${{ matrix.python-version }}

          Pipeline finished with error.

          Steps details - ${{ toJson(steps) }}
        "
    - name: send success message
      uses: appleboy/telegram-action@master
      if: success()
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "
          _____________________________________________________________

          Project: ${{ github.repository }}

          Author: ${{ github.actor }}

          Commit: ${{ github.sha }}

          Python ${{ matrix.python-version }}

          Pipeline finished successfully.
        "
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: checks
      steps:
        - name: Check out the repo
          # Проверка доступности репозитория Docker Hub для workflow
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          # Вызов сборщика контейнеров docker
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          # Запуск скрипта авторизации на Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          # Пуш образа в Docker Hub
          uses: docker/build-push-action@v2
          with:
            push: true
            tags:  ${{ secrets.DOCKER_USERNAME }}/new_admin_panel:latest
  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USERNAME }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            passphrase: ${{ secrets.SERVER_PASSPHRASE }}
            script: |
              cd new_admin_panel
              sudo docker-compose down --rmi all
              rm .env
              touch .env
              echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              echo DB_HOST_LOCAL=${{ secrets.DB_HOST_LOCAL }} >> .env
              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
              echo DEBUG=${{ secrets.DEBUG }} >> .env
              echo DEBUG_LOCAL=${{ secrets.DEBUG_LOCAL }} >> .env
              echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
              echo SIZE_FOR_SAVE_DATA=${{ secrets.SIZE_FOR_SAVE_DATA }} >> .env
              echo SQLITE_DB_NAME=${{ secrets.SQLITE_DB_NAME }} >> .env
              echo PAGINATION_SIZE=${{ secrets.PAGINATION_SIZE }} >> .env
              echo SETTINGS_FOR_CELERY=${{ secrets.SETTINGS_FOR_CELERY }} >> .env
              echo SETTINGS_FOR_CELERY=${{ secrets.SETTINGS_FOR_CELERY }} >> .env
              echo LOGGING_ON=${{ secrets.LOGGING_ON }} >> .env
              echo LOG_LEVEL=${{ secrets.LOG_LEVEL }} >> .env
              echo LOG_PATH=${{ secrets.LOG_PATH }} >> .env
              echo LOG_FILE=${{ secrets.LOG_FILE }} >> .env
              echo LOCAL=${{ secrets.LOCAL }} >> .env
              echo SIZE_FOR_LOAD_TO_ELASTICSEARCH=${{ secrets.SIZE_FOR_LOAD_TO_ELASTICSEARCH }} >> .env
              echo ELASTICSEARCH_PORT=${{ secrets.ELASTICSEARCH_PORT }} >> .env
              echo ELASTICSEARCH_HOSTNAME=${{ secrets.ELASTICSEARCH_HOSTNAME }} >> .env
              echo ELASTICSEARCH_PROTOCOL=${{ secrets.ELASTICSEARCH_PROTOCOL }} >> .env
              echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
              echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
              sudo docker-compose up -d
